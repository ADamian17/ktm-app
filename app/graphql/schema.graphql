type Board {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
  uri: String
  userId: Int
}

"""
The connection type for Board.
"""
type BoardConnection {
  """
  Total number of items in the connection
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [BoardEdge]

  """
  A list of nodes.
  """
  nodes: [Board]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BoardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Board
}

type Column {
  boardId: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

"""
Attributes for creating a board
"""
input CreateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the board
  """
  name: String!

  """
  The URI of the board
  """
  uri: String
}

"""
Attributes for creating a new column
"""
input CreateColumnInput {
  """
  The ID of the board to which the column belongs
  """
  boardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the column
  """
  name: String!
}

"""
Attributes for creating a new task
"""
input CreateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the column to which the task belongs
  """
  columnId: ID!

  """
  The description of the task
  """
  description: String!

  """
  The title of the task
  """
  title: String!
}

"""
Attributes for creating a user
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
Autogenerated input type of DeleteBoard
"""
input DeleteBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the board to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeleteBoard.
"""
type DeleteBoardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of DeleteColumn
"""
input DeleteColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the column to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeleteColumn.
"""
type DeleteColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of DeleteTask
"""
input DeleteTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the task to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeleteTask.
"""
type DeleteTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  success: Boolean!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  """
  Create a new board
  """
  createBoard(
    """
    Parameters for CreateBoard
    """
    input: CreateBoardInput!
  ): Board

  """
  Create a new column
  """
  createColumn(
    """
    Parameters for CreateColumn
    """
    input: CreateColumnInput!
  ): Column

  """
  Create a new task
  """
  createTask(
    """
    Parameters for CreateTask
    """
    input: CreateTaskInput!
  ): Task

  """
  Create a new user
  """
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): User

  """
  Delete an board
  """
  deleteBoard(
    """
    Parameters for DeleteBoard
    """
    input: DeleteBoardInput!
  ): DeleteBoardPayload

  """
  Delete an column
  """
  deleteColumn(
    """
    Parameters for DeleteColumn
    """
    input: DeleteColumnInput!
  ): DeleteColumnPayload

  """
  Delete an task
  """
  deleteTask(
    """
    Parameters for DeleteTask
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """
  Delete an user
  """
  deleteUser: DeleteUserPayload

  """
  Sign in a user
  """
  signInUser(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload

  """
  Sign out a user
  """
  signOutUser: SignOutPayload

  """
  Update an existing board
  """
  updateBoard(
    """
    Parameters for UpdateBoard
    """
    input: UpdateBoardInput!
  ): Board

  """
  Update an existing column
  """
  updateColumn(
    """
    Parameters for UpdateColumn
    """
    input: UpdateColumnInput!
  ): Column

  """
  Update an task
  """
  updateTask(
    """
    Parameters for UpdateTask
    """
    input: UpdateTaskInput!
  ): Task

  """
  Update an user
  """
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): User
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Get user by ID
  """
  currentUser: User
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String
  user: User
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  success: Boolean!
}

type Task {
  columnId: Int
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  status: String
  title: String
  updatedAt: ISO8601DateTime!
}

"""
Attributes for updating a board
"""
input UpdateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the board to update
  """
  id: ID!

  """
  The name of the board
  """
  name: String

  """
  The URI of the board
  """
  uri: String
}

"""
Attributes for creating a new column
"""
input UpdateColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the column to update
  """
  id: ID!

  """
  The name of the column
  """
  name: String
}

"""
Attributes for updating a update task
"""
input UpdateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description of the task
  """
  description: String

  """
  The ID of the task
  """
  id: ID!

  """
  The title of the task
  """
  title: String
}

"""
Attributes for updating an user
"""
input UpdateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String!
}

type User {
  boards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection
  createdAt: ISO8601DateTime!
  email: String
  firstName: String
  id: ID!
  lastName: String
  role: String!
  updatedAt: ISO8601DateTime!
}
